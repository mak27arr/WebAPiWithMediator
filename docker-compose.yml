services:
  webapi:
    image: webapi_product
    container_name: ${PRODUCT_SERVICE_CONTAINER}
    build:
        context: .
        dockerfile: ./Products/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Host=POSTGRES_DB;Port=5432;Database=${POSTGRES__PRODUCT__DB};Username=${POSTGRES__PRODUCT__USER};Password=${POSTGRES__PRODUCT__PASSWORD}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
      - REDIS__CONNECTIONSTRING=${REDIS__CONNECTIONSTRING} 
    ports:
      - "${PRODUCT__PORT}:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product.rule=PathPrefix(`/api/Product`)"
      - "traefik.http.routers.—Åurrency.rule=PathPrefix(`/api/Currency`)"
      - "traefik.http.routers.productPrice.rule=PathPrefix(`/api/ProductPrice`)"
      - "traefik.http.services.product.loadbalancer.server.port=5000"
      - "traefik.http.services.currency.loadbalancer.server.port=5000"
      - "traefik.http.services.productPrice.loadbalancer.server.port=5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  inventoryService:
    image: inventory_service
    container_name: ${INVENTORY_SERVICE_CONTAINER}
    build:
        context: .
        dockerfile: ./InventoryService/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Host=postgres_db;Port=5432;Database=${POSTGRES__INVENTORYSERVICE__DB};Username=${POSTGRES__INVENTORYSERVICE__USER};Password=${POSTGRES__INVENTORYSERVICE__PASSWORD}
      - KAFKA__HOST=${KAFKA__HOST}
      - KAFKA__PORT=${KAFKA__PORT}
      - KAFKA__GROUPID=inventory-service-group
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "${INVENTORY__PORT}:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.rule=PathPrefix(`/api/inventory`)"
      - "traefik.http.services.inventory.loadbalancer.server.port=5000"
      - "traefik.http.routers.inventory.swagger.rule=PathPrefix(`/api/inventory/swagger/v1/swagger.json`)"
      - "traefik.http.middlewares.inventory-stripprefix.stripprefix.prefixes=/api/inventory"
      - "traefik.http.routers.inventory.swagger.middlewares=inventory-stripprefix"
    depends_on:
      postgres:
        condition: service_healthy
  OrderService:
    image: order_service
    container_name: ${ORDER_SERVICE_CONTAINER}
    build:
        context: .
        dockerfile: ./OrderService/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Host=postgres_db;Port=5432;Database=${POSTGRES__ORDERSERVICE__DB};Username=${POSTGRES__ORDERSERVICE__USER};Password=${POSTGRES__ORDERSERVICE__PASSWORD}
      - KAFKA__HOST=${KAFKA__HOST}
      - KAFKA__PORT=${KAFKA__PORT}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "${ORDERSERVICE__PORT}:5000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order.rule=PathPrefix(`/api/order`)"
      - "traefik.http.services.order.loadbalancer.server.port=5000"
    depends_on:
      postgres:
        condition: service_healthy
  # gateway:
  #   image: ${DOCKER_REGISTRY-}gateway
  #   container_name: gateway
  #   build:
  #     context: .
  #     dockerfile: ./Gateway/docker/Dockerfile
  #   env_file:
  #     - .env
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
  #     - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
  #     - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
  #   ports:
  #     - "8080:8080"
  #     - "8081:8081"
  #   depends_on:
  #     - webapi
  #   networks:
  #     - webapp-network
  #
  auth:
    image: webapi_auth
    container_name: ${AUTH_CONTAINER}
    build:
        context: .
        dockerfile: ./Auth/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres_db;Port=5432;Database=${POSTGRES_AUTH_DB};Username=${POSTGRES_AUTH_USER};Password=${POSTGRES_AUTH_PASSWORD}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "${AUTH__PORT}:5010"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=5010"
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES_DB: ${POSTGRES__DEFAULT__DB}
      POSTGRES__PRODUCT__USER: ${POSTGRES__PRODUCT__USER}
      POSTGRES__PRODUCT__PASSWORD: ${POSTGRES__PRODUCT__PASSWORD}
      POSTGRES__PRODUCT__DB: ${POSTGRES__PRODUCT__DB}
      POSTGRES__INVENTORYSERVICE__USER: ${POSTGRES__INVENTORYSERVICE__USER}
      POSTGRES__INVENTORYSERVICE__PASSWORD: ${POSTGRES__INVENTORYSERVICE__PASSWORD}
      POSTGRES__INVENTORYSERVICE__DB: ${POSTGRES__INVENTORYSERVICE__DB}
      POSTGRES__ORDERSERVICE__USER: ${POSTGRES__ORDERSERVICE__USER}
      POSTGRES__ORDERSERVICE__PASSWORD: ${POSTGRES__ORDERSERVICE__PASSWORD}
      POSTGRES__ORDERSERVICE__DB: ${POSTGRES__ORDERSERVICE__DB}
    volumes:
      - ./scripts/postgres/init-multiple-db.sh:/docker-entrypoint-initdb.d/init-multiple-db.sh
    ports:
      - "5432:5432"
    networks:
      - webapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--quiet"]
      interval: 1s
      timeout: 5s
      retries: 10
  Kafka:
    image: bitnami/kafka:latest
    container_name: ${KAFKA__HOST}
    restart: always
    ports:
      - "${KAFKA__PORT}:9092"
    networks:
      - webapp-network
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:${KAFKA__CLIENT__PORT},EXTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://${KAFKA__HOST}:${KAFKA__CLIENT__PORT},EXTERNAL://${KAFKA__HOST}:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - ALLOW_PLAINTEXT_LISTENER=yes
  kafdrop:
    platform: linux/amd64
    image: obsidiandynamics/kafdrop
    restart: always
    ports:
      - "9100:9000"
    environment:
      - KAFKA_BROKERCONNECT=${KAFKA__HOST}:${KAFKA__CLIENT__PORT}
      - JVM_OPTS=-Xms32M -Xmx64M
    networks:
      - webapp-network
    depends_on:
      - Kafka
  redis:
    image: redis:latest
    container_name: ${REDIS_SERVICE_CONTAINER}
    restart: always
    ports:
      - "${REDIS_SERVICE_PORT}:6379"
    networks:
      - webapp-network
    volumes:
      - redis_data:/data
      - ./scripts/postgres/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  traefik:
    image: "traefik:v2.10"
    container_name: traefik
    restart: always
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"     
      - "8081:443"
      - "9002:8080" 
    networks:
      - webapp-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"  
      - "./scripts/traefik/traefik.yml:/etc/traefik/traefik.yml"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    environment:
      BASE_URL: "/api/swagger"
      SWAGGER_JSON: /swagger/openapi.json
      TRAEFIK_HTTP_PORT: ${TRAEFIK_HTTP_PORT}
    volumes:
      - ./scripts/swagger/openapi.json:/swagger/openapi.json
    networks:
      - webapp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger.rule=PathPrefix(`/api/swagger`)"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"
networks:
  webapp-network:
    driver: bridge

volumes:
  redis_data:
    driver: local