services:
  webapi:
    image: webapi_product
    container_name: ${PRODUCT_SERVICE_CONTAINER}
    build:
        context: .
        dockerfile: ./Products/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Host=POSTGRES_DB;Port=5432;Database=${POSTGRES__PRODUCT__DB};Username=${POSTGRES__PRODUCT__USER};Password=${POSTGRES__PRODUCT__PASSWORD}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
  inventoryService:
    image: inventory_service
    container_name: inventory_service
    build:
        context: .
        dockerfile: ./InventoryService/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Host=postgres_db;Port=5432;Database=${POSTGRES__INVENTORYSERVICE__DB};Username=${POSTGRES__INVENTORYSERVICE__USER};Password=${POSTGRES__INVENTORYSERVICE__PASSWORD}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "5020:5020"
    depends_on:
      postgres:
        condition: service_healthy
  gateway:
    image: ${DOCKER_REGISTRY-}gateway
    container_name: gateway
    build:
      context: .
      dockerfile: ./Gateway/docker/Dockerfile
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      - webapi
    networks:
      - webapp-network
  postgres:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES_DB: ${POSTGRES__DEFAULT__DB}
      POSTGRES__PRODUCT__USER: ${POSTGRES__PRODUCT__USER}
      POSTGRES__PRODUCT__PASSWORD: ${POSTGRES__PRODUCT__PASSWORD}
      POSTGRES__PRODUCT__DB: ${POSTGRES__PRODUCT__DB}
      POSTGRES__INVENTORYSERVICE__USER: ${POSTGRES__INVENTORYSERVICE__USER}
      POSTGRES__INVENTORYSERVICE__PASSWORD: ${POSTGRES__INVENTORYSERVICE__PASSWORD}
      POSTGRES__INVENTORYSERVICE__DB: ${POSTGRES__INVENTORYSERVICE__DB}
    volumes:
      - ./scripts/postgres/init-multiple-db.sh:/docker-entrypoint-initdb.d/init-multiple-db.sh
    ports:
      - "5432:5432"
    networks:
      - webapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--quiet"]
      interval: 1s
      timeout: 5s
      retries: 10
  auth:
    image: webapi_auth
    container_name: webapi_auth
    build:
        context: .
        dockerfile: ./Auth/docker/Dockerfile
    networks:
      - webapp-network
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres_db;Port=5432;Database=${POSTGRES_Auth_DB};Username=${POSTGRES_Auth_USER};Password=${POSTGRES_Auth_PASSWORD}
      - AUTHENTICATION__AUTHORITY=${AUTHENTICATION__AUTHORITY}
      - AUTHENTICATION__ISSUERSIGNINGKEY=${AUTHENTICATION__ISSUERSIGNINGKEY}
      - AUTHENTICATION__AUDIENCE=${AUTHENTICATION__AUDIENCE}
    ports:
      - "5010:5010"
    depends_on:
      postgres:
        condition: service_healthy
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
networks:
  webapp-network:
    driver: bridge
